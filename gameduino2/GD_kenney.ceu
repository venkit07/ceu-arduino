#define NCLOUD 15
#define NHEART 15
input void GD_REDRAW;
input void GD_SUN;
inout void GD_HEARTS;

native do
    byte hy[] = {36, 12, 144, 204, 216, 120, 48, 168, 192, 84, 72, 60, 24, 180, 0, 108, 228, 132, 156, 96};
    #define HEART_SZ  (HEART_HEIGHT + 14)
end

class Cloud with
    var int i;
    var int x,y;
do
    x = 16 * (_random(480) - (_CLOUD_WIDTH / 2));
    y = 16 * _hy[i];
    every GD_REDRAW do
        _GD.Begin(_BITMAPS);
        _GD.BlendFunc(_ONE, _ONE_MINUS_SRC_ALPHA);
        _GD.BitmapHandle(_CLOUD_HANDLE);
        _GD.Cell(0);
        _GD.Vertex2f(x, y);
        y = y + (4 + (i >> 3));
        if (y > (16 * 272)) then
            y = y - 16 * (272 + _CLOUD_HEIGHT);
        end
    end
end

class Heart with
    var int i;
    var int x,y;
do
    x = _random(16 * 480);
    y = 16 * _hy[i];
    every GD_REDRAW do
        _GD.BlendFunc(_SRC_ALPHA, _ONE_MINUS_SRC_ALPHA);
        _GD.ColorA(200);
        _GD.Begin(_BITMAPS);
        _GD.BitmapHandle(_HEART_HANDLE);
        _GD.Cell(0);
        _GD.Vertex2f(x - (16 * _HEART_SZ / 2), y);
        y = y + 30 + (i << 2);
        if(y > (16 * 272)) then
            y = y - 16 * (272 + _HEART_SZ);
        end
    end
end

class Sun with
    var int min,max,i;
do
    min = 300;
    max = 600;
    i = 0;
    var byte dir = 1,it = 3;
    every GD_REDRAW do
        // the first two trails are used for achieving the animation effect required
        par/and do
            if(it == 3 and dir == 0 and i == min+20) then
                max = 500;
                it = it - 1;
            else/if(it == 2 and dir == 1 and i == max-20) then
                min = 400;
                it = it - 1;
            else/if(it == 1 and dir == 0 and i == min+20) then
                max = 400;
                it = it - 1;
                dir = 2;
            end
        with
            if(dir == 1) then
                i = i + 20;
                if(i == max) then
                    dir = 0;
                end 
            else/if(dir == 0) then
                i = i - 20;
                if(i == min) then
                    dir = 1;
                end
            end
        with
            _GD.ColorRGB(_C1B);
            _GD.PointSize(i);
            _GD.Begin(_POINTS);
            _GD.Vertex2f(16*240, 16*136);
        end
    end
end

var int i = 0;

par/or do
    #include "gd.ceu"
with
    _GD.Clear();
    native do
        #include "kenney_assets.h"
    end
    _LOAD_ASSETS();
    
    pool Cloud[NCLOUD] clouds;
    loop j in 20 do
        spawn Cloud in clouds with
            _.i = j - 1;
        end;
    end
    await FOREVER;
with
    pool Sun[1] sun;
    await GD_SUN;
    spawn Sun in sun;
    await GD_HEARTS;
    
    pool Heart[NHEART] hearts;
    loop j in NHEART do
        spawn Heart in hearts with
            _.i = j - 1;
        end;
    end

    await FOREVER;
with
    every GD_REDRAW do
        _GD.swap();
        _GD.Clear();
        _GD.cmd_gradient(0,   0, 0xa0a4f7,
                     0, 272, 0xd0f4f7);
        i = i + 1;
        if(i == 360) then
            async do
                emit GD_SUN;
            end
        else/if(i == 480) then
            async do
                emit GD_HEARTS;
            end        
        end
    end
end

