#define NCLOUD 0
#define NHEART 0
#define NTRAIL 25

input void GD_REDRAW;

native do
    #define HEART_SZ  (HEART_HEIGHT + 14)
end


class Cloud with
do
    var int x = 16 * (_random(480) - (_CLOUD_WIDTH / 2));
    var int y = 16 * (_random(240) - (_CLOUD_HEIGHT / 2));
    var byte vel = _random(20);
    var byte lum = 128 + 5 * vel;
    every GD_REDRAW do
        _GD.Begin(_BITMAPS);
        _GD.BlendFunc(_ONE, _ONE_MINUS_SRC_ALPHA);
        _GD.BitmapHandle(_CLOUD_HANDLE);
        _GD.Cell(0);
        _GD.ColorA(lum);
        _GD.ColorRGB(lum, lum, lum);
        
        _GD.Vertex2f(x, y);
        y = y + (4 + (vel >> 3));
        
        if (y > (16 * 272)) then
            if(vel%2==0) then
                x = 16 * (_random(240) - (_CLOUD_WIDTH / 2));
            else
                x = 16 * (_random(240, 480) - (_CLOUD_WIDTH / 2));
            end
            y = y - 16 * (272 + _CLOUD_HEIGHT);
        end
    end
end

class Heart with
do
    await 7s;
    var int x = _random(16 * 480);
    var int y = 16 * _random(240);
    var int deg = _random(20) * 8;
    var byte dir = _random(0,1);
    every GD_REDRAW do
        _GD.BlendFunc(_SRC_ALPHA, _ONE_MINUS_SRC_ALPHA);
        _GD.ColorA(200);
        _GD.Begin(_BITMAPS);
        _GD.BitmapHandle(_HEART_HANDLE);
        _GD.Cell(0);
        _GD.cmd_loadidentity();
        _GD.cmd_translate(_F16(_HEART_SZ/2), _F16(_HEART_SZ/2));
        if( dir%2 == 0 ) then
            _GD.cmd_rotate(_DEGREES(deg));
        else
            _GD.cmd_rotate(_DEGREES(-deg));
        end
        deg = deg + 0.25;
        _GD.cmd_translate(_F16(-_HEART_WIDTH/2), _F16(-_HEART_HEIGHT/2));
        _GD.cmd_setmatrix();
        _GD.Vertex2f(x - (16 * _HEART_SZ / 2), y);
        y = y + 30 + (deg << 4);
        if(y > (16 * 272)) then
            x = _random(16 * 480);
            y = y - 16 * (272 + _HEART_SZ);
        end
    end
end

class Sun with
do
    await 5s;     
    var int size;   
    
    par do
        loop j in 30 do
            size = j * 20;
            await GD_REDRAW;
        end
        loop j in 20 do
            size = size - 20;
            await GD_REDRAW;
        end
        loop j in 5 do
            size = size + 20;
            await GD_REDRAW;
        end
        size = 400;
    with
        every GD_REDRAW do
            _GD.ColorRGB(_C1B);
            _GD.PointSize(size);
            _GD.Begin(_POINTS);
            _GD.Vertex2f(16*240, 16*136);
        end
    end
end

class Trail with
    var int tx,ty;
    var u32 color;
do
    var int size = 192;
    loop j in 30 do
        await GD_REDRAW;
        _GD.BlendFunc(_SRC_ALPHA, _ONE_MINUS_SRC_ALPHA);
        _GD.Begin(_POINTS);
        _GD.ColorA(0x90);
        _GD.ColorRGB(color);
        _GD.PointSize(size);
        _GD.Vertex2f(tx, ty);
        size = size - 1;
        ty = ty + 12;
    end
end


class Player with
    var int i;
do
    var int cntr = 0,x,y;
    pool Trail[NTRAIL] trails;
    
    every GD_REDRAW do
      /// the variables names have no sense
        var u16 a = cntr * 100;

        var u16 a2 = a << 1;
        var u16 a3 = a2 << 1;
      
        if(i==0) then
            x = 16 * 240 + _GD.rsin(16 * 120, a) + _GD.rsin(16 * 120, a2);
            y = 16 * 136 + _GD.rsin(16 * 70, a3); 
            if ((cntr & 3) == 0) then
                spawn Trail in trails with
                    _.tx = x;
                    _.ty = y;
                    _.color = 0x8bcfba;
                end;        
            end
        else/if (i==1) then
            x = 16 * 240 + _GD.rsin(16 * 240, a);
            y = 16 * 100 + _GD.rsin(16 * 36, a2);
            if ((cntr & 3) == 0) then
                spawn Trail in trails with
                    _.tx = x;
                    _.ty = y;
                    _.color = 0x8db5e7;
                end;        
            end
        else
            x = 16 * 240 + _GD.rsin(16 * 240, a2);
            y = 16 * 135 + _GD.rsin(16 * 10, a) + _GD.rsin(16 * 18, a3);
            if ((cntr & 3) == 0) then
                spawn Trail in trails with
                    _.tx = x;
                    _.ty = y;
                    _.color = 0xf19cb7;
                end;        
            end
        end
      
        _GD.ColorRGB(0xffffff);
        _GD.ColorA(0xff);
        _GD.BlendFunc(_ONE, _ONE_MINUS_SRC_ALPHA);
        _GD.BitmapHandle(_PLAYER1_HANDLE);
        _GD.Begin(_BITMAPS);
        _GD.cmd_loadidentity();
        _GD.cmd_translate(_F16(_PLAYER1_SIZE / 2),_F16(_PLAYER1_SIZE / 2));
        _GD.cmd_rotate(a + i * 0x7000);
        _GD.cmd_translate(_F16(-_PLAYER1_WIDTH / 2),_F16(-_PLAYER1_HEIGHT / 2));
        _GD.cmd_setmatrix();
        _GD.Cell(i);
        _GD.Vertex2f(x - (16 * _PLAYER1_SIZE / 2),
                     y - (16 * _PLAYER1_SIZE / 2));
        tmp = tmp + 1;
    end
end


par/or do
    #include "gd.ceu"
with
    _GD.Clear();
    native do
        #include "kenney_assets.h"
    end
    _LOAD_ASSETS();

    /// Sun, Clouds, Players, Hearts
    /// The declaration order is important: Sun redraws first (behind all others)
    
    var Sun sun;
    
    var Cloud[NCLOUD] clouds;
    
    var int i = 0;
    var Player[3] player with
        _.i = i;
        i = i + 1;
    end;

    i = 0;
    var Heart[NHEART] hearts;
    
    await FOREVER;
with
    
    var int y = 1648;
    
    every GD_REDRAW do
        
        _GD.RestoreContext();
        _GD.Begin(_BITMAPS);
        _GD.BlendFunc(_ONE, _ONE_MINUS_SRC_ALPHA);
        _GD.BitmapHandle(_TILES_HANDLE);
        var int tmp = (y >> 5) * 15;
        
        var byte yo = y & 31;
        var byte ctr = 0;
        loop j in 10 do
            loop i in 15 do
                var byte t = _pgm_read_byte_near(_layer1_map + tmp + ctr);
                ctr = ctr + 1;
                if  (t != 0) then
                    _GD.Cell(t - 1);
                    _GD.Vertex2f(16 * 32 * i, 16 * ((32 * j) - yo));
                end
            end
        end
        y = y - 1;
        
        if(y == 928) then
            break;    /// why? => I plan to loop the whole program like the original demo. I'll be putting a loop when this trail ends.
                        //   The map isn't infinite too. So going much beyond this point generates weird outputs on the screen since they are undefined.
        end
        _GD.swap();
        _GD.Clear();
        _GD.cmd_gradient(0,   0, 0xa0a4f7,
                         0, 272, 0xd0f4f7);
    end
    
    await FOREVER;
end
